// C# implementation of above approach 
using System;
using System.Linq;

public class GFG
{



	// Function to return length of 
	// smallest subarray containing both 
	// maximum and minimum value 
	static int minSubarray(int[] A, int n)
	{

		// find maximum and minimum 
		// values in the array 
		int minValue = A.Min();
		int maxValue = A.Max();

		int pos_min = -1, pos_max = -1, ans = int.MaxValue;

		// iterate over the array and set answer 
		// to smallest difference between position 
		// of maximum and position of minimum value 
		for (int i = 0; i < n; i++)
		{

			// last occurrence of minValue 
			if (A[i] == minValue)
				pos_min = i;

			// last occurrence of maxValue 
			if (A[i] == maxValue)
				pos_max = i;

			if (pos_max != -1 && pos_min != -1)
				ans = Math.Min(ans, Math.Abs(pos_min - pos_max) + 1);
		}

		return ans;
	}

	// Driver code 


	static public void Main()
	{
		int[] A = { 1, 5, 9, 7, 1, 9, 4 };
		int n = A.Length;

		Console.WriteLine(minSubarray(A, n));
	}
}
// This code is contributed by anuj_67.. 
